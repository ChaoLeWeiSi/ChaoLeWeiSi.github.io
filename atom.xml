<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zxy&#39;s Blog</title>
  
  <subtitle>记录并总结cs相关知识</subtitle>
  <link href="https://chaoleweisi.github.io/atom.xml" rel="self"/>
  
  <link href="https://chaoleweisi.github.io/"/>
  <updated>2024-10-10T13:11:04.361Z</updated>
  <id>https://chaoleweisi.github.io/</id>
  
  <author>
    <name>侏小一</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图</title>
    <link href="https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph/"/>
    <id>https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph/</id>
    <published>2024-10-09T16:00:00.000Z</published>
    <updated>2024-10-10T13:11:04.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><u>图（graph）</u>是一种非线性数据结构，由<u>顶点（vertex）</u>和<u>边（edge）</u>组成。我们可以将图 $G$ 抽象地表示为一组顶点 $V$ 和一组边 $E$ 的集合。以下示例展示了一个包含 5 个顶点和 7 条边的图。</p><p>$$<br>\begin{aligned}<br>V &amp; &#x3D; { 1, 2, 3, 4, 5 } \newline<br>E &amp; &#x3D; { (1,2), (1,3), (1,5), (2,3), (2,4), (2,5), (4,5) } \newline<br>G &amp; &#x3D; { V, E } \newline<br>\end{aligned}<br>$$</p><p>如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表拓展而来的数据结构。如下图所示，<strong>相较于线性关系（链表）和分治关系（树），网络关系（图）的自由度更高</strong>，因而更为复杂。</p><p><img src="/2024/10/10/chapter_graph/graph/linkedlist_tree_graph.png" alt="链表、树、图之间的关系"></p><h2 id="图的常见类型与术语"><a href="#图的常见类型与术语" class="headerlink" title="图的常见类型与术语"></a>图的常见类型与术语</h2><p>根据边是否具有方向，可分为<u>无向图（undirected graph）</u>和<u>有向图（directed graph）</u>，如下图所示。</p><ul><li>在无向图中，边表示两顶点之间的“双向”连接关系，例如微信或 QQ 中的“好友关系”。</li><li>在有向图中，边具有方向性，即 $A \rightarrow B$ 和 $A \leftarrow B$ 两个方向的边是相互独立的，例如微博或抖音上的“关注”与“被关注”关系。</li></ul><p><img src="/2024/10/10/chapter_graph/graph/directed_graph.png" alt="有向图与无向图"></p><p>根据所有顶点是否连通，可分为<u>连通图（connected graph）</u>和<u>非连通图（disconnected graph）</u>，如下图所示。</p><ul><li>对于连通图，从某个顶点出发，可以到达其余任意顶点。</li><li>对于非连通图，从某个顶点出发，至少有一个顶点无法到达。</li></ul><p><img src="/2024/10/10/chapter_graph/graph/connected_graph.png" alt="连通图与非连通图"></p><p>我们还可以为边添加“权重”变量，从而得到如下图所示的<u>有权图（weighted graph）</u>。例如在《王者荣耀》等手游中，系统会根据共同游戏时间来计算玩家之间的“亲密度”，这种亲密度网络就可以用有权图来表示。</p><p><img src="/2024/10/10/chapter_graph/graph/weighted_graph.png" alt="有权图与无权图"></p><p>图数据结构包含以下常用术语。</p><ul><li><u>邻接（adjacency）</u>：当两顶点之间存在边相连时，称这两顶点“邻接”。在上图中，顶点 1 的邻接顶点为顶点 2、3、5。</li><li><u>路径（path）</u>：从顶点 A 到顶点 B 经过的边构成的序列被称为从 A 到 B 的“路径”。在上图中，边序列 1-5-2-4 是顶点 1 到顶点 4 的一条路径。</li><li><u>度（degree）</u>：一个顶点拥有的边数。对于有向图，<u>入度（in-degree）</u>表示有多少条边指向该顶点，<u>出度（out-degree）</u>表示有多少条边从该顶点指出。</li></ul><h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><p>图的常用表示方式包括“邻接矩阵”和“邻接表”。以下使用无向图进行举例。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>设图的顶点数量为 $n$ ，<u>邻接矩阵（adjacency matrix）</u>使用一个 $n \times n$ 大小的矩阵来表示图，每一行（列）代表一个顶点，矩阵元素代表边，用 $1$ 或 $0$ 表示两个顶点之间是否存在边。</p><p>如下图所示，设邻接矩阵为 $M$、顶点列表为 $V$ ，那么矩阵元素 $M[i, j] &#x3D; 1$ 表示顶点 $V[i]$ 到顶点 $V[j]$ 之间存在边，反之 $M[i, j] &#x3D; 0$ 表示两顶点之间无边。</p><p><img src="/2024/10/10/chapter_graph/graph/adjacency_matrix.png" alt="图的邻接矩阵表示"></p><p>邻接矩阵具有以下特性。</p><ul><li>顶点不能与自身相连，因此邻接矩阵主对角线元素没有意义。</li><li>对于无向图，两个方向的边等价，此时邻接矩阵关于主对角线对称。</li><li>将邻接矩阵的元素从 $1$ 和 $0$ 替换为权重，则可表示有权图。</li></ul><p>使用邻接矩阵表示图时，我们可以直接访问矩阵元素以获取边，因此增删查改操作的效率很高，时间复杂度均为 $O(1)$ 。然而，矩阵的空间复杂度为 $O(n^2)$ ，内存占用较多。</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p><u>邻接表（adjacency list）</u>使用 $n$ 个链表来表示图，链表节点表示顶点。第 $i$ 个链表对应顶点 $i$ ，其中存储了该顶点的所有邻接顶点（与该顶点相连的顶点）。下图展示了一个使用邻接表存储的图的示例。</p><p><img src="/2024/10/10/chapter_graph/graph/adjacency_list.png" alt="图的邻接表表示"></p><p>邻接表仅存储实际存在的边，而边的总数通常远小于 $n^2$ ，因此它更加节省空间。然而，在邻接表中需要通过遍历链表来查找边，因此其时间效率不如邻接矩阵。</p><p>观察上图，<strong>邻接表结构与哈希表中的“链式地址”非常相似，因此我们也可以采用类似的方法来优化效率</strong>。比如当链表较长时，可以将链表转化为 AVL 树或红黑树，从而将时间效率从 $O(n)$ 优化至 $O(\log n)$ ；还可以把链表转换为哈希表，从而将时间复杂度降至 $O(1)$ 。</p><h2 id="图的常见应用"><a href="#图的常见应用" class="headerlink" title="图的常见应用"></a>图的常见应用</h2><p>如下表所示，许多现实系统可以用图来建模，相应的问题也可以约化为图计算问题。</p><p align="center"> 表 <id> &nbsp; 现实生活中常见的图 </id></p><table><thead><tr><th></th><th>顶点</th><th>边</th><th>图计算问题</th></tr></thead><tbody><tr><td>社交网络</td><td>用户</td><td>好友关系</td><td>潜在好友推荐</td></tr><tr><td>地铁线路</td><td>站点</td><td>站点间的连通性</td><td>最短路线推荐</td></tr><tr><td>太阳系</td><td>星体</td><td>星体间的万有引力作用</td><td>行星轨道计算</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h1&gt;&lt;p&gt;&lt;u&gt;图（graph）&lt;/u&gt;是一种非线性数据结构，由&lt;u&gt;顶点（vertex）&lt;/u&gt;和&lt;u&gt;边（edge）&lt;/u&gt;组成。我们可以将图 $G$ 抽</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://chaoleweisi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://chaoleweisi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图的基础操作</title>
    <link href="https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph_operations/"/>
    <id>https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph_operations/</id>
    <published>2024-10-09T16:00:00.000Z</published>
    <updated>2024-10-10T12:57:09.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的基础操作"><a href="#图的基础操作" class="headerlink" title="图的基础操作"></a>图的基础操作</h1><p>图的基础操作可分为对“边”的操作和对“顶点”的操作。在“邻接矩阵”和“邻接表”两种表示方法下，实现方式有所不同。</p><h2 id="基于邻接矩阵的实现"><a href="#基于邻接矩阵的实现" class="headerlink" title="基于邻接矩阵的实现"></a>基于邻接矩阵的实现</h2><p>给定一个顶点数量为 $n$ 的无向图，则各种操作的实现方式如下图所示。</p><ul><li><strong>添加或删除边</strong>：直接在邻接矩阵中修改指定的边即可，使用 $O(1)$ 时间。而由于是无向图，因此需要同时更新两个方向的边。</li><li><strong>添加顶点</strong>：在邻接矩阵的尾部添加一行一列，并全部填 $0$ 即可，使用 $O(n)$ 时间。</li><li><strong>删除顶点</strong>：在邻接矩阵中删除一行一列。当删除首行首列时达到最差情况，需要将 $(n-1)^2$ 个元素“向左上移动”，从而使用 $O(n^2)$ 时间。</li><li><strong>初始化</strong>：传入 $n$ 个顶点，初始化长度为 $n$ 的顶点列表 <code>vertices</code> ，使用 $O(n)$ 时间；初始化 $n \times n$ 大小的邻接矩阵 <code>adjMat</code> ，使用 $O(n^2)$ 时间。</li></ul><p>&#x3D;&#x3D;&#x3D; “初始化邻接矩阵”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_matrix_step1_initialization.png" alt="邻接矩阵的初始化、增删边、增删顶点"></p><p>&#x3D;&#x3D;&#x3D; “添加边”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_matrix_step2_add_edge.png" alt="adjacency_matrix_add_edge"></p><p>&#x3D;&#x3D;&#x3D; “删除边”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_matrix_step3_remove_edge.png" alt="adjacency_matrix_remove_edge"></p><p>&#x3D;&#x3D;&#x3D; “添加顶点”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_matrix_step4_add_vertex.png" alt="adjacency_matrix_add_vertex"></p><p>&#x3D;&#x3D;&#x3D; “删除顶点”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_matrix_step5_remove_vertex.png" alt="adjacency_matrix_remove_vertex"></p><p>以下是基于邻接矩阵表示图的实现代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[file]&#123;graph_adjacency_matrix&#125;-[class]&#123;graph_adj_mat&#125;-[func]&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="基于邻接表的实现"><a href="#基于邻接表的实现" class="headerlink" title="基于邻接表的实现"></a>基于邻接表的实现</h2><p>设无向图的顶点总数为 $n$、边总数为 $m$ ，则可根据下图所示的方法实现各种操作。</p><ul><li><strong>添加边</strong>：在顶点对应链表的末尾添加边即可，使用 $O(1)$ 时间。因为是无向图，所以需要同时添加两个方向的边。</li><li><strong>删除边</strong>：在顶点对应链表中查找并删除指定边，使用 $O(m)$ 时间。在无向图中，需要同时删除两个方向的边。</li><li><strong>添加顶点</strong>：在邻接表中添加一个链表，并将新增顶点作为链表头节点，使用 $O(1)$ 时间。</li><li><strong>删除顶点</strong>：需遍历整个邻接表，删除包含指定顶点的所有边，使用 $O(n + m)$ 时间。</li><li><strong>初始化</strong>：在邻接表中创建 $n$ 个顶点和 $2m$ 条边，使用 $O(n + m)$ 时间。</li></ul><p>&#x3D;&#x3D;&#x3D; “初始化邻接表”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_list_step1_initialization.png" alt="邻接表的初始化、增删边、增删顶点"></p><p>&#x3D;&#x3D;&#x3D; “添加边”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_list_step2_add_edge.png" alt="adjacency_list_add_edge"></p><p>&#x3D;&#x3D;&#x3D; “删除边”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_list_step3_remove_edge.png" alt="adjacency_list_remove_edge"></p><p>&#x3D;&#x3D;&#x3D; “添加顶点”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_list_step4_add_vertex.png" alt="adjacency_list_add_vertex"></p><p>&#x3D;&#x3D;&#x3D; “删除顶点”<br>    <img src="/2024/10/10/chapter_graph/graph_operations/adjacency_list_step5_remove_vertex.png" alt="adjacency_list_remove_vertex"></p><p>以下是邻接表的代码实现。对比上图，实际代码有以下不同。</p><ul><li>为了方便添加与删除顶点，以及简化代码，我们使用列表（动态数组）来代替链表。</li><li>使用哈希表来存储邻接表，<code>key</code> 为顶点实例，<code>value</code> 为该顶点的邻接顶点列表（链表）。</li></ul><p>另外，我们在邻接表中使用 <code>Vertex</code> 类来表示顶点，这样做的原因是：如果与邻接矩阵一样，用列表索引来区分不同顶点，那么假设要删除索引为 $i$ 的顶点，则需遍历整个邻接表，将所有大于 $i$ 的索引全部减 $1$ ，效率很低。而如果每个顶点都是唯一的 <code>Vertex</code> 实例，删除某一顶点之后就无须改动其他顶点了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[file]&#123;graph_adjacency_list&#125;-[class]&#123;graph_adj_list&#125;-[func]&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h2><p>设图中共有 $n$ 个顶点和 $m$ 条边，下表对比了邻接矩阵和邻接表的时间效率和空间效率。</p><p align="center"> 表 <id> &nbsp; 邻接矩阵与邻接表对比 </id></p><table><thead><tr><th></th><th>邻接矩阵</th><th>邻接表（链表）</th><th>邻接表（哈希表）</th></tr></thead><tbody><tr><td>判断是否邻接</td><td>$O(1)$</td><td>$O(m)$</td><td>$O(1)$</td></tr><tr><td>添加边</td><td>$O(1)$</td><td>$O(1)$</td><td>$O(1)$</td></tr><tr><td>删除边</td><td>$O(1)$</td><td>$O(m)$</td><td>$O(1)$</td></tr><tr><td>添加顶点</td><td>$O(n)$</td><td>$O(1)$</td><td>$O(1)$</td></tr><tr><td>删除顶点</td><td>$O(n^2)$</td><td>$O(n + m)$</td><td>$O(n)$</td></tr><tr><td>内存空间占用</td><td>$O(n^2)$</td><td>$O(n + m)$</td><td>$O(n + m)$</td></tr></tbody></table><p>观察上表，似乎邻接表（哈希表）的时间效率与空间效率最优。但实际上，在邻接矩阵中操作边的效率更高，只需一次数组访问或赋值操作即可。综合来看，邻接矩阵体现了“以空间换时间”的原则，而邻接表体现了“以时间换空间”的原则。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图的基础操作&quot;&gt;&lt;a href=&quot;#图的基础操作&quot; class=&quot;headerlink&quot; title=&quot;图的基础操作&quot;&gt;&lt;/a&gt;图的基础操作&lt;/h1&gt;&lt;p&gt;图的基础操作可分为对“边”的操作和对“顶点”的操作。在“邻接矩阵”和“邻接表”两种表示方法下，实现方式有所不</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://chaoleweisi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://chaoleweisi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图的遍历</title>
    <link href="https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph_traversal/"/>
    <id>https://chaoleweisi.github.io/2024/10/10/chapter_graph/graph_traversal/</id>
    <published>2024-10-09T16:00:00.000Z</published>
    <updated>2024-10-10T12:57:23.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><p>树代表的是“一对多”的关系，而图则具有更高的自由度，可以表示任意的“多对多”关系。因此，我们可以把树看作图的一种特例。显然，<strong>树的遍历操作也是图的遍历操作的一种特例</strong>。</p><p>图和树都需要应用搜索算法来实现遍历操作。图的遍历方式也可分为两种：<u>广度优先遍历</u>和<u>深度优先遍历</u>。</p><h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p><strong>广度优先遍历是一种由近及远的遍历方式，从某个节点出发，始终优先访问距离最近的顶点，并一层层向外扩张</strong>。如下图所示，从左上角顶点出发，首先遍历该顶点的所有邻接顶点，然后遍历下一个顶点的所有邻接顶点，以此类推，直至所有顶点访问完毕。</p><p><img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs.png" alt="图的广度优先遍历"></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>BFS 通常借助队列来实现，代码如下所示。队列具有“先入先出”的性质，这与 BFS 的“由近及远”的思想异曲同工。</p><ol><li>将遍历起始顶点 <code>startVet</code> 加入队列，并开启循环。</li><li>在循环的每轮迭代中，弹出队首顶点并记录访问，然后将该顶点的所有邻接顶点加入到队列尾部。</li><li>循环步骤 <code>2.</code> ，直到所有顶点被访问完毕后结束。</li></ol><p>为了防止重复遍历顶点，我们需要借助一个哈希集合 <code>visited</code> 来记录哪些节点已被访问。</p><p>!!! tip</p><pre><code>哈希集合可以看作一个只存储 `key` 而不存储 `value` 的哈希表，它可以在 $O(1)$ 时间复杂度下进行 `key` 的增删查改操作。根据 `key` 的唯一性，哈希集合通常用于数据去重等场景。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[file]&#123;graph_bfs&#125;-[class]&#123;&#125;-[func]&#123;graph_bfs&#125;</span><br></pre></td></tr></table></figure><p>代码相对抽象，建议对照下图来加深理解。</p><p>&#x3D;&#x3D;&#x3D; “&lt;1&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step1.png" alt="图的广度优先遍历步骤"></p><p>&#x3D;&#x3D;&#x3D; “&lt;2&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step2.png" alt="graph_bfs_step2"></p><p>&#x3D;&#x3D;&#x3D; “&lt;3&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step3.png" alt="graph_bfs_step3"></p><p>&#x3D;&#x3D;&#x3D; “&lt;4&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step4.png" alt="graph_bfs_step4"></p><p>&#x3D;&#x3D;&#x3D; “&lt;5&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step5.png" alt="graph_bfs_step5"></p><p>&#x3D;&#x3D;&#x3D; “&lt;6&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step6.png" alt="graph_bfs_step6"></p><p>&#x3D;&#x3D;&#x3D; “&lt;7&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step7.png" alt="graph_bfs_step7"></p><p>&#x3D;&#x3D;&#x3D; “&lt;8&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step8.png" alt="graph_bfs_step8"></p><p>&#x3D;&#x3D;&#x3D; “&lt;9&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step9.png" alt="graph_bfs_step9"></p><p>&#x3D;&#x3D;&#x3D; “&lt;10&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step10.png" alt="graph_bfs_step10"></p><p>&#x3D;&#x3D;&#x3D; “&lt;11&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_bfs_step11.png" alt="graph_bfs_step11"></p><p>!!! question “广度优先遍历的序列是否唯一？”</p><pre><code>不唯一。广度优先遍历只要求按“由近及远”的顺序遍历，**而多个相同距离的顶点的遍历顺序允许被任意打乱**。以上图为例，顶点 $1$、$3$ 的访问顺序可以交换，顶点 $2$、$4$、$6$ 的访问顺序也可以任意交换。</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong>：所有顶点都会入队并出队一次，使用 $O(|V|)$ 时间；在遍历邻接顶点的过程中，由于是无向图，因此所有边都会被访问 $2$ 次，使用 $O(2|E|)$ 时间；总体使用 $O(|V| + |E|)$ 时间。</p><p><strong>空间复杂度</strong>：列表 <code>res</code> ，哈希集合 <code>visited</code> ，队列 <code>que</code> 中的顶点数量最多为 $|V|$ ，使用 $O(|V|)$ 空间。</p><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p><strong>深度优先遍历是一种优先走到底、无路可走再回头的遍历方式</strong>。如下图所示，从左上角顶点出发，访问当前顶点的某个邻接顶点，直到走到尽头时返回，再继续走到尽头并返回，以此类推，直至所有顶点遍历完成。</p><p><img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs.png" alt="图的深度优先遍历"></p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><p>这种“走到尽头再返回”的算法范式通常基于递归来实现。与广度优先遍历类似，在深度优先遍历中，我们也需要借助一个哈希集合 <code>visited</code> 来记录已被访问的顶点，以避免重复访问顶点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[file]&#123;graph_dfs&#125;-[class]&#123;&#125;-[func]&#123;graph_dfs&#125;</span><br></pre></td></tr></table></figure><p>深度优先遍历的算法流程如下图所示。</p><ul><li><strong>直虚线代表向下递推</strong>，表示开启了一个新的递归方法来访问新顶点。</li><li><strong>曲虚线代表向上回溯</strong>，表示此递归方法已经返回，回溯到了开启此方法的位置。</li></ul><p>为了加深理解，建议将下图与代码结合起来，在脑中模拟（或者用笔画下来）整个 DFS 过程，包括每个递归方法何时开启、何时返回。</p><p>&#x3D;&#x3D;&#x3D; “&lt;1&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step1.png" alt="图的深度优先遍历步骤"></p><p>&#x3D;&#x3D;&#x3D; “&lt;2&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step2.png" alt="graph_dfs_step2"></p><p>&#x3D;&#x3D;&#x3D; “&lt;3&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step3.png" alt="graph_dfs_step3"></p><p>&#x3D;&#x3D;&#x3D; “&lt;4&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step4.png" alt="graph_dfs_step4"></p><p>&#x3D;&#x3D;&#x3D; “&lt;5&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step5.png" alt="graph_dfs_step5"></p><p>&#x3D;&#x3D;&#x3D; “&lt;6&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step6.png" alt="graph_dfs_step6"></p><p>&#x3D;&#x3D;&#x3D; “&lt;7&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step7.png" alt="graph_dfs_step7"></p><p>&#x3D;&#x3D;&#x3D; “&lt;8&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step8.png" alt="graph_dfs_step8"></p><p>&#x3D;&#x3D;&#x3D; “&lt;9&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step9.png" alt="graph_dfs_step9"></p><p>&#x3D;&#x3D;&#x3D; “&lt;10&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step10.png" alt="graph_dfs_step10"></p><p>&#x3D;&#x3D;&#x3D; “&lt;11&gt;”<br>    <img src="/2024/10/10/chapter_graph/graph_traversal/graph_dfs_step11.png" alt="graph_dfs_step11"></p><p>!!! question “深度优先遍历的序列是否唯一？”</p><pre><code>与广度优先遍历类似，深度优先遍历序列的顺序也不是唯一的。给定某顶点，先往哪个方向探索都可以，即邻接顶点的顺序可以任意打乱，都是深度优先遍历。以树的遍历为例，“根 $\rightarrow$ 左 $\rightarrow$ 右”“左 $\rightarrow$ 根 $\rightarrow$ 右”“左 $\rightarrow$ 右 $\rightarrow$ 根”分别对应前序、中序、后序遍历，它们展示了三种遍历优先级，然而这三者都属于深度优先遍历。</code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong>：所有顶点都会被访问 $1$ 次，使用 $O(|V|)$ 时间；所有边都会被访问 $2$ 次，使用 $O(2|E|)$ 时间；总体使用 $O(|V| + |E|)$ 时间。</p><p><strong>空间复杂度</strong>：列表 <code>res</code> ，哈希集合 <code>visited</code> 顶点数量最多为 $|V|$ ，递归深度最大为 $|V|$ ，因此使用 $O(|V|)$ 空间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图的遍历&quot;&gt;&lt;a href=&quot;#图的遍历&quot; class=&quot;headerlink&quot; title=&quot;图的遍历&quot;&gt;&lt;/a&gt;图的遍历&lt;/h1&gt;&lt;p&gt;树代表的是“一对多”的关系，而图则具有更高的自由度，可以表示任意的“多对多”关系。因此，我们可以把树看作图的一种特例。显然，</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://chaoleweisi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://chaoleweisi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图的小结</title>
    <link href="https://chaoleweisi.github.io/2024/10/10/chapter_graph/summary/"/>
    <id>https://chaoleweisi.github.io/2024/10/10/chapter_graph/summary/</id>
    <published>2024-10-09T16:00:00.000Z</published>
    <updated>2024-10-10T12:57:52.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>图由顶点和边组成，可以表示为一组顶点和一组边构成的集合。</li><li>相较于线性关系（链表）和分治关系（树），网络关系（图）具有更高的自由度，因而更为复杂。</li><li>有向图的边具有方向性，连通图中的任意顶点均可达，有权图的每条边都包含权重变量。</li><li>邻接矩阵利用矩阵来表示图，每一行（列）代表一个顶点，矩阵元素代表边，用 $1$ 或 $0$ 表示两个顶点之间有边或无边。邻接矩阵在增删查改操作上效率很高，但空间占用较多。</li><li>邻接表使用多个链表来表示图，第 $i$ 个链表对应顶点 $i$ ，其中存储了该顶点的所有邻接顶点。邻接表相对于邻接矩阵更加节省空间，但由于需要遍历链表来查找边，因此时间效率较低。</li><li>当邻接表中的链表过长时，可以将其转换为红黑树或哈希表，从而提升查询效率。</li><li>从算法思想的角度分析，邻接矩阵体现了“以空间换时间”，邻接表体现了“以时间换空间”。</li><li>图可用于建模各类现实系统，如社交网络、地铁线路等。</li><li>树是图的一种特例，树的遍历也是图的遍历的一种特例。</li><li>图的广度优先遍历是一种由近及远、层层扩张的搜索方式，通常借助队列实现。</li><li>图的深度优先遍历是一种优先走到底、无路可走时再回溯的搜索方式，常基于递归来实现。</li></ul><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><p><strong>Q</strong>：路径的定义是顶点序列还是边序列？</p><p>维基百科上不同语言版本的定义不一致：英文版是“路径是一个边序列”，而中文版是“路径是一个顶点序列”。以下是英文版原文：In graph theory, a path in a graph is a finite or infinite sequence of edges which joins a sequence of vertices.</p><p>在本文中，路径被视为一个边序列，而不是一个顶点序列。这是因为两个顶点之间可能存在多条边连接，此时每条边都对应一条路径。</p><p><strong>Q</strong>：非连通图中是否会有无法遍历到的点？</p><p>在非连通图中，从某个顶点出发，至少有一个顶点无法到达。遍历非连通图需要设置多个起点，以遍历到图的所有连通分量。</p><p><strong>Q</strong>：在邻接表中，“与该顶点相连的所有顶点”的顶点顺序是否有要求？</p><p>可以是任意顺序。但在实际应用中，可能需要按照指定规则来排序，比如按照顶点添加的次序，或者按照顶点值大小的顺序等，这样有助于快速查找“带有某种极值”的顶点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h1&gt;&lt;h3 id=&quot;重点回顾&quot;&gt;&lt;a href=&quot;#重点回顾&quot; class=&quot;headerlink&quot; title=&quot;重点回顾&quot;&gt;&lt;/a&gt;重点回顾&lt;/h</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://chaoleweisi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="https://chaoleweisi.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chaoleweisi.github.io/2024/10/09/hello-world/"/>
    <id>https://chaoleweisi.github.io/2024/10/09/hello-world/</id>
    <published>2024-10-09T09:55:28.665Z</published>
    <updated>2024-10-09T09:55:28.665Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://chaoleweisi.github.io/2024/10/09/builtins/"/>
    <id>https://chaoleweisi.github.io/2024/10/09/builtins/</id>
    <published>2024-10-08T16:00:00.000Z</published>
    <updated>2024-10-09T15:13:13.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-刷题常用内置算法和数据结构"><a href="#Python-刷题常用内置算法和数据结构" class="headerlink" title="Python 刷题常用内置算法和数据结构"></a>Python 刷题常用内置算法和数据结构</h1><p>数据结构和算法中涉及到 python 内置模块，一般如果内置的可以满足需求，我们优先使用内置模块，<br>因为在性能和容错性方面内置模块要好于我们自己实现（比如有些是 c 实现的）。</p><ul><li>常用内置数据类型：list, tuple, dict, set, frozenset</li><li>collections 模块：Counter(计数器), deque(双端队列), OrderedDict(有序字典)，defaultdict(默认值字典)</li><li>heapq: 堆操作</li><li>bisect: 二分查找</li></ul><p>下边我列了一个常用 python 内置数据结构和算法的表格，确保了解这些数据结构和算法的使用以及时间、空间复杂度。</p><table><thead><tr><th>数据结构&#x2F;算法</th><th>语言内置</th><th>内置库</th></tr></thead><tbody><tr><td>线性结构</td><td>list(列表)&#x2F;tuple(元组)</td><td>array(数组，不常用)&#x2F;collections.namedtuple</td></tr><tr><td>链式结构</td><td></td><td>collections.deque(双端队列)</td></tr><tr><td>字典结构</td><td>dict(字典)</td><td>collections.Counter(计数器)&#x2F;OrderedDict(有序字典)&#x2F;defaultdict(默认字典)</td></tr><tr><td>集合结构</td><td>set(集合)&#x2F;frozenset(不可变集合)</td><td></td></tr><tr><td>排序算法</td><td>sorted</td><td></td></tr><tr><td>二分算法</td><td></td><td>bisect模块</td></tr><tr><td>堆算法</td><td></td><td>heapq模块</td></tr><tr><td>优先级队列</td><td></td><td>queue.PriorityQueue&#x2F;heapq</td></tr><tr><td>缓存算法</td><td></td><td>functools.lru_cache(Least Recent Used, python3)&#x2F;cache</td></tr></tbody></table><h1 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h1><p>如果你使用 python2 or python3 刷题（比如力扣leetcode），有一些坑或者技巧需要注意：</p><ul><li>字典顺序。python3 和 python2 的 dict 有所用不同，python3.7 之后的 dict 会保持插入顺序(不是字典序), python2 不要依赖 dict 迭代顺序，请使用 OrderedDict</li><li>矩阵。正确初始化一个不可变对象的二维数组：<code>dp = [ [0]*col for _ in range(row) ]</code>，不要用 <code>dp = [[0] * n] * m</code>， 否则里边都<br>引用的同一个 list，修改一个都会变。<code>[[0 for _ in range(col)] for _ in range(row)]</code> 也可以(稍慢)，因为数字 0 是不可变对象</li><li>深浅拷贝。经常在回溯题中需要<code>res,path=[],[]</code>，path 是用来回溯的路径。找到一个结果的时候需要用 <code>res.append(path[:])</code> 而<br>不是<code>res.append(path)#错！</code> ，因为这里append的path的引用，之后修改了 path 结果就是错的！(或者用copy模块，不过不如[:]语法简洁)</li><li>int范围。python在数值范围建议用：<code>MAXINT = 2**63-1; MININT = -2**63</code> 。因为 python2 sys.maxint 和 python3 sys.maxsize 不统一</li><li>优先级队列：使用内置queue.PriorityQueue or heapq ，定义一个 Item 类实现”小于” 魔术方法就可以实现，下边有代码演示</li><li>缓存。python3 的 functools 模块自带了 cache(等价于lru_cache(maxsize&#x3D;None)) 和 lru_cache 装饰器，在一些需要递归记忆化搜索的时候会很方便</li><li>除法变更：python2和 python3 除法做了变更要注意。还有负数除法。 python2 <code>int(6/-123)==-1, int(-3/2)==-2</code>，但是 python3 <code>int(6/-123)==0, int(-3/2)==-1</code>。<br>正数的整数除法统一用”&#x2F;&#x2F;“。比如二分求中间值 <code>mid=(l+r)//2</code> 或者 <code>mid=l+(r-l)//2</code>，因为python天生支持大数不会溢出两种写法都行。负数整数除法统一写 int(a&#x2F;b)。<br>凡是遇到除法运算的题目建议统一使用 python3 提交。</li><li>自定义排序函数。python2 可以用 <code>nums.sort(cmp=lambda a, b: a - b)</code>，但是python3移除了cmp参数。<br>python3如果想要用自定义排序函数可以使用 functools.cmp_to_key 函数改成 <code>nums.sort(key=cmp_to_key(lambda a, b: a - b))</code></li></ul><h1 id="python-递归暴栈-栈溢出"><a href="#python-递归暴栈-栈溢出" class="headerlink" title="python 递归暴栈(栈溢出)"></a>python 递归暴栈(栈溢出)</h1><p>python 递归函数默认递归深度比较小，你可以通过 <code>sys.getrecursionlimit()</code> 函数打印出来。<br>我在 mac 机器上测试的时候，以下结果 python2 输出 1000。这就导致一些递归函数测试用例稍微多一些就会报错。<br>(一个用例超过上千个数据就会报错了)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit()) <span class="comment"># 我的 mac 机器上输出 1000</span></span><br></pre></td></tr></table></figure><p>可以把以下代码设置最大栈深度，放到文件开头，在牛客上提交代码的时候可以避免一些递归代码报错。<br>(leetcode 似乎给设置了，类似的题目发现力扣上提交不会栈溢出但是在牛客就会)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>) <span class="comment"># 设置函数栈深度足够大，避免栈溢出错误</span></span><br></pre></td></tr></table></figure><h1 id="python-int-值范围"><a href="#python-int-值范围" class="headerlink" title="python int 值范围"></a>python int 值范围</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 乘方 （比较推荐⭐️，py2/3 都兼容不容易出错)</span><br><span class="line">MAXINT = 2**63-1</span><br><span class="line">MININT = -2**63</span><br><span class="line"></span><br><span class="line"># py3</span><br><span class="line">import sys</span><br><span class="line">MAXINT = sys.maxsize</span><br><span class="line">MININT = -sys.maxsize - 1</span><br><span class="line"></span><br><span class="line"># py2</span><br><span class="line">sys.maxint</span><br><span class="line"></span><br><span class="line"># 位运算</span><br><span class="line">MAXINT = (1&lt;&lt;63) - 1</span><br><span class="line">MININT = ~MAXINT</span><br></pre></td></tr></table></figure><h1 id="python-负数位运算的坑"><a href="#python-负数位运算的坑" class="headerlink" title="python 负数位运算的坑"></a>python 负数位运算的坑</h1><ol><li>Python3 中的整型是补码形式存储的</li><li>Python3 中 bin 一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号</li><li>为了获得负数（十进制表示）的补码，需要手动将其和十六进制数 0xffffffff 进行按位与操作，得到结果是个十六进制数，再交给 bin() 进行输出，<br>得到的才是你想要的补码表示。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数转换 https://leetcode-cn.com/problems/convert-integer-lcci/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertInteger</span>(<span class="params">self, A: <span class="built_in">int</span>, B: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>((A &amp; <span class="number">0xffffffff</span>) ^ (B &amp; <span class="number">0xffffffff</span>)).count(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://www.runoob.com/w3cnote/python-negative-storage.html">https://www.runoob.com/w3cnote/python-negative-storage.html</a></li><li><a href="https://leetcode-cn.com/problems/convert-integer-lcci/solution/python3-zhu-yi-qi-dui-yu-fu-shu-de-cun-chu-fang-sh/">https://leetcode-cn.com/problems/convert-integer-lcci/solution/python3-zhu-yi-qi-dui-yu-fu-shu-de-cun-chu-fang-sh/</a></li></ul><h1 id="python-list-技巧"><a href="#python-list-技巧" class="headerlink" title="python list 技巧"></a>python list 技巧</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排序嵌套 list，比如元素值是一个 tuple 或者 list</span></span><br><span class="line">l = [(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">sorted</span>(l, key=<span class="keyword">lambda</span> p:p[<span class="number">0</span>]) <span class="comment"># 根据第1个值排序，[(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 3), (&#x27;c&#x27;, 2)]</span></span><br><span class="line"><span class="built_in">sorted</span>(l, key=<span class="keyword">lambda</span> p:p[<span class="number">1</span>]) <span class="comment"># 根据第2个值排序，[(&#x27;a&#x27;, 1), (&#x27;c&#x27;, 2), (&#x27;b&#x27;, 3)]</span></span><br><span class="line"><span class="built_in">sorted</span>(l, key=<span class="keyword">lambda</span> p:(-p[<span class="number">0</span>], p[<span class="number">1</span>])) <span class="comment"># 先根据第一个倒排，如果相等再根据第二个正排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时获取最大值的下标和值</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">maxi, maxval = <span class="built_in">max</span>(<span class="built_in">enumerate</span>(l), key=<span class="keyword">lambda</span> iv: iv[<span class="number">1</span>]) <span class="comment"># 2, 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 排序list自定义函数(python2 直接用 cmp 参数， python3 需要用 cmp_to_key 转成 key 参数)</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line">nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">sorted</span>(nums, key=cmp_to_key(<span class="keyword">lambda</span> a,b: a-b) ) <span class="comment"># [1 ,2 ,3, 4, 5]</span></span><br><span class="line"><span class="built_in">sorted</span>(nums, key=cmp_to_key(<span class="keyword">lambda</span> a,b: b-a) ) <span class="comment"># [5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码判断列表是否有序</span></span><br><span class="line">issorted = <span class="built_in">all</span>(l[i] &lt;= l[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 一行代码求前缀和</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> accumulate</span><br><span class="line">presums = <span class="built_in">list</span>(accumulate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])) <span class="comment"># [1, 3, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码求矩阵元素总和 https://stackoverflow.com/questions/10713150/how-to-sum-a-2d-array-in-python</span></span><br><span class="line">allsum = <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, matrix)) <span class="comment"># 或者 allsum = sum((sum(row) for row in matrix))</span></span><br><span class="line"><span class="comment"># 一行代码判断一个元素是否在矩阵中，比如判断 1 是否在矩阵matrix中</span></span><br><span class="line"><span class="built_in">any</span>(<span class="number">1</span> <span class="keyword">in</span> row <span class="keyword">for</span> row <span class="keyword">in</span> matrix)</span><br><span class="line"><span class="comment"># 一行代码获取矩阵最大、最小值</span></span><br><span class="line">maxval = <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">max</span>, matrix))</span><br></pre></td></tr></table></figure><h1 id="python-dict-技巧"><a href="#python-dict-技巧" class="headerlink" title="python dict 技巧"></a>python dict 技巧</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 根据 key，value 排序字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># dict sort by **key** and reverse</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items()))  <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(), reverse=<span class="literal">True</span>)) <span class="comment"># &#123;&#x27;d&#x27;: 4, &#x27;c&#x27;: 3, &#x27;b&#x27;: 2, &#x27;a&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dict sort by **value** and reverse</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(), key = <span class="keyword">lambda</span> kv:kv[<span class="number">1</span>])) <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(), key = <span class="keyword">lambda</span> kv:kv[<span class="number">1</span>], reverse=<span class="literal">True</span>)) <span class="comment"># &#123;&#x27;d&#x27;: 4, &#x27;c&#x27;: 3, &#x27;b&#x27;: 2, &#x27;a&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字典对应的最大值对应的 key,value</span></span><br><span class="line">mydict = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;B&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">87</span>&#125;</span><br><span class="line">maximum = <span class="built_in">max</span>(mydict, key=mydict.get)  <span class="comment"># Just use &#x27;min&#x27; instead of &#x27;max&#x27; for minimum.</span></span><br><span class="line">maxk, maxv = maximum, mydict[maximum]</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">maxk, maxv = <span class="built_in">max</span>(mydict.items(), key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持默认值的有序字典 (OrderedDict and defaultdict)  (注意是 key 插入顺序不是字典序)</span></span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/6190331/how-to-implement-an-ordered-default-dict</span></span><br><span class="line">od = OrderedDict()  <span class="comment"># collections.OrderedDict()</span></span><br><span class="line">od[i] = od.get(i, <span class="number">0</span>) + <span class="number">1</span> <span class="comment"># 间接实现了 defaultdict(int) ，同时保持了插入字典的 key 顺序</span></span><br></pre></td></tr></table></figure><h1 id="链表题目调试函数"><a href="#链表题目调试函数" class="headerlink" title="链表题目调试函数"></a>链表题目调试函数</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写链表题目经常用到的一些通用函数和调试函数，定义等，方便代码调试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Node(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来输出调试</span></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩写，单测方便写，比如构建链表 1-&gt;2-&gt;3  N(1, N(2, N(3)))</span></span><br><span class="line">N = Node = ListNode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_list</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;linked list to python []&quot;&quot;&quot;</span></span><br><span class="line">    res = []</span><br><span class="line">    curnode = head</span><br><span class="line">    <span class="keyword">while</span> curnode:</span><br><span class="line">        res.append(curnode.val)</span><br><span class="line">        curnode = curnode.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_list</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用数组生成一个链表方便测试 [1,2,3] 1-&gt;2-&gt;3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    head = ListNode(nums[<span class="number">0</span>])</span><br><span class="line">    pre = head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">        node = ListNode(nums[i])</span><br><span class="line">        pre.<span class="built_in">next</span> = node</span><br><span class="line">        pre = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_list</span>(<span class="params">head</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印链表&quot;&quot;&quot;</span></span><br><span class="line">    cur = head</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        res += <span class="string">&quot;&#123;&#125;-&gt;&quot;</span>.<span class="built_in">format</span>(cur.val)</span><br><span class="line">        cur = cur.<span class="built_in">next</span></span><br><span class="line">    res += <span class="string">&quot;nil&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h1 id="内置库实现优先级队列的三种方式"><a href="#内置库实现优先级队列的三种方式" class="headerlink" title="内置库实现优先级队列的三种方式"></a>内置库实现优先级队列的三种方式</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_buildin_PriorityQueue</span>():  <span class="comment"># python3</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试内置的 PriorityQueue</span></span><br><span class="line"><span class="string">    https://pythonguides.com/priority-queue-in-python/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line">    q = PriorityQueue()</span><br><span class="line">    q.put((<span class="number">10</span>, <span class="string">&#x27;Red balls&#x27;</span>))</span><br><span class="line">    q.put((<span class="number">8</span>, <span class="string">&#x27;Pink balls&#x27;</span>))</span><br><span class="line">    q.put((<span class="number">5</span>, <span class="string">&#x27;White balls&#x27;</span>))</span><br><span class="line">    q.put((<span class="number">4</span>, <span class="string">&#x27;Green balls&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        item = q.get()</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_buildin_heapq_as_PriorityQueue</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试使用 heapq 实现优先级队列，保存一个 tuple 比较元素(tuple第一个元素是优先级)</span></span><br><span class="line"><span class="string">    实际上是利用了元组tuple比较从第一个开始比较的性质</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> heapq</span><br><span class="line">    s_roll = []</span><br><span class="line">    heapq.heappush(s_roll, (<span class="number">4</span>, <span class="string">&quot;Tom&quot;</span>))</span><br><span class="line">    heapq.heappush(s_roll, (<span class="number">1</span>, <span class="string">&quot;Aruhi&quot;</span>))</span><br><span class="line">    heapq.heappush(s_roll, (<span class="number">3</span>, <span class="string">&quot;Dyson&quot;</span>))</span><br><span class="line">    heapq.heappush(s_roll, (<span class="number">2</span>, <span class="string">&quot;Bob&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> s_roll:</span><br><span class="line">        deque_r = heapq.heappop(s_roll)</span><br><span class="line">        <span class="built_in">print</span>(deque_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 没有了 __cmp__ 魔法函数 https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, weight</span>):</span><br><span class="line">        <span class="variable language_">self</span>.key, <span class="variable language_">self</span>.weight = key, weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>): <span class="comment"># heapq 源码实现只用了 小于 比较，这里定义了就可以 push 一个 item 类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.weight &lt; other.weight</span><br><span class="line"></span><br><span class="line"><span class="comment">#   def __eq__(self, other): # 这个可以省略，只要定义了 __lt__ 魔法函数就可以了</span></span><br><span class="line"><span class="comment">#       return self.weight == other.weight</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   def __str__(self):</span></span><br><span class="line"><span class="comment">#       return &#x27;&#123;&#125;:&#123;&#125;&#x27;.format(self.key,self.weight)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Item.__lt__ = lambda self, other: self.weight &lt; other.weight # 对于已有的类，直接加一句就可以实现作为 heap item 了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_heap_item</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试使用 Item 类实现优先级队列，因为 heapq 内置使用的是小于运算法，</span></span><br><span class="line"><span class="string">    重写魔术 &lt; 比较方法即可实现</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> heapq</span><br><span class="line">    pq = []</span><br><span class="line">    heapq.heappush(pq, Item(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>))</span><br><span class="line">    heapq.heappush(pq, Item(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">    heapq.heappush(pq, Item(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">while</span> pq:</span><br><span class="line">        <span class="built_in">print</span>(heapq.heappop(pq))</span><br></pre></td></tr></table></figure><h1 id="python-如何实现最大堆"><a href="#python-如何实现最大堆" class="headerlink" title="python 如何实现最大堆"></a>python 如何实现最大堆</h1><p>python自带了heapq 模块实现了最小堆(min-heaq)，但是如果想要实现最大堆(max-heap)，有几种实现方式：</p><ol><li>对放入的数字取反。比如 10 放入 -10 ，然后取出来的时候再取反。个人倾向于这种，可以自己封装一个类防止来回取反搞晕</li><li>直接根据 heapq 模块的函数封装几个最大堆的函数，也是通过取反实现</li><li>新建一个对象重写 <code>__lt__</code> 魔术方法。这种方式也可以，但是重写魔术方法修改了语义不太好(个人不推荐)</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1:封装一个 max heap 类</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    https://stackoverflow.com/questions/2501457/what-do-i-use-for-a-max-heap-implementation-in-python</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        <span class="variable language_">self</span>.capacity = capacity</span><br><span class="line">        <span class="variable language_">self</span>.minheap = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, val</span>):</span><br><span class="line">        heapq.heappush(<span class="variable language_">self</span>.minheap, -val)  <span class="comment"># push取反后的数字, 1 -&gt; -1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        val = heapq.heappop(<span class="variable language_">self</span>.minheap)</span><br><span class="line">        <span class="keyword">return</span> -val <span class="comment"># 拿出来的数字再取反</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> -<span class="variable language_">self</span>.minheap[<span class="number">0</span>] <span class="comment"># min-heap 的数组最小值是 m[0]，最大值取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2: 重新定几个新的 max-heap 方法</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maxheappush</span>(<span class="params">h, item</span>):</span><br><span class="line">    <span class="keyword">return</span> heapq.heappush(h, -item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maxheappop</span>(<span class="params">h</span>):</span><br><span class="line">    <span class="keyword">return</span> -heapq.heappop(h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maxheapval</span>(<span class="params">h</span>):</span><br><span class="line">    <span class="keyword">return</span> -h[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="lru-cache-cache-优化记忆化搜索"><a href="#lru-cache-cache-优化记忆化搜索" class="headerlink" title="lru_cache&#x2F;cache 优化记忆化搜索"></a>lru_cache&#x2F;cache 优化记忆化搜索</h1><p>python3 functools 模块的 cache 功能和 lru_cache(maxsize&#x3D;None) 一样，不过更加轻量更快。在记忆化递归搜索的时候很方便。<br>注意这里的参数 <code>maxsize=None</code> 一定要设置为 None，否则默认的 maxsize&#x3D;128。<br>举一个力扣上的例子，如果不加 cache 递归函数因为会大量重复计算直接超时，但是加一个装饰器就可以通过。<br>当然了如果你用 python2 没有这个装饰器，你可以直接用 python 的 dict 来实现。(存在就返回，否则计算结果保存到 dict 里)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[337] 打家劫舍 III</span></span><br><span class="line"><span class="string">https://leetcode-cn.com/problems/house-robber-iii/description/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># cache 等价于 functools.lru_cache(maxsize=None), 不过python3版本低可能没有 cache 只有 lru_cache</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cache, lru_cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        思路 1：递归求解（注意不加 cache 会超时！！)</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># @lru_cache(maxsize=None) # 注意如果 python3 版本不是很新的话，只能用 lru_cache(maxsize=None)</span></span><br><span class="line"><span class="meta">        @cache  </span><span class="comment"># <span class="doctag">NOTE:</span> 不加 cache 会直接超时，就只能用动态规划了</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line">            <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 左右孩子都是空</span></span><br><span class="line">                <span class="keyword">return</span> root.val</span><br><span class="line">            <span class="comment"># 不偷父节点,考虑偷 root 的左右孩子</span></span><br><span class="line">            val1 = dfs(root.left) + dfs(root.right)</span><br><span class="line">            <span class="comment"># 偷父节点</span></span><br><span class="line">            val2 = root.val</span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                val2 += dfs(root.left.left) + dfs(root.left.right)</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                val2 += dfs(root.right.left) + dfs(root.right.right)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(val1, val2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="leetcode-二叉树调试函数"><a href="#leetcode-二叉树调试函数" class="headerlink" title="leetcode 二叉树调试函数"></a>leetcode 二叉树调试函数</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">二叉树树相关问题调试函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>(<span class="title class_ inherited__">object</span>):  <span class="comment"># leetcode tree 节点定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = left</span><br><span class="line">        <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TreeNode:&#123;&#125; left:&#123;&#125; right:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.val, <span class="variable language_">self</span>.left, <span class="variable language_">self</span>.right)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_tree_from_lc_input</span>(<span class="params">vals_str</span>):  <span class="comment"># [1,2,3] -&gt; root TreeNode</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 根据 输入生成一个 tree，返回 root 节点，注意输入字符串</span></span><br><span class="line"><span class="string">    # [450] 删除二叉搜索树中的节点</span></span><br><span class="line"><span class="string">    # https://leetcode-cn.com/problems/delete-node-in-a-bst/description/</span></span><br><span class="line"><span class="string">    # 比如 450 题目单测代码可以这么写</span></span><br><span class="line"><span class="string">    def test():</span></span><br><span class="line"><span class="string">        s = Solution()</span></span><br><span class="line"><span class="string">        root = gen_tree_from_lc_input(&quot;[2,1]&quot;)</span></span><br><span class="line"><span class="string">        key = 1</span></span><br><span class="line"><span class="string">        res = &quot;[2]&quot;</span></span><br><span class="line"><span class="string">        assert to_lc_tree_str(s.deleteNode(root, key)) == res</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> ast</span><br><span class="line">    valids = vals_str.replace(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;None&quot;</span>)</span><br><span class="line">    vals = ast.literal_eval(valids)</span><br><span class="line">    <span class="comment"># 以下就是 gen_tree 函数的内容，为了方便单独使用不调用函数了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vals:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    nodemap = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)):</span><br><span class="line">        <span class="keyword">if</span> vals[i] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 一开始写的 if vals[i]，但是 0 节点就错了! 应该显示判断是否为 None(空节点)</span></span><br><span class="line">            nodemap[i] = TreeNode(vals[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nodemap[i] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    root = nodemap[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)):</span><br><span class="line">        l = <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">        r = <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line">        cur = nodemap.get(i, <span class="literal">None</span>)</span><br><span class="line">        left = nodemap.get(l, <span class="literal">None</span>)</span><br><span class="line">        right = nodemap.get(r, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> cur:</span><br><span class="line">            cur.left = left</span><br><span class="line">            cur.right = right</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_lc_tree_str</span>(<span class="params">root</span>):  <span class="comment"># root TreeNode -&gt; [1,2,3,null]</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回层序序列化后的树字符串，可以和 leetcode 输出结果比对字符串&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[]&#x27;</span></span><br><span class="line">    curnodes = [root]</span><br><span class="line">    res = [root.val]</span><br><span class="line">    <span class="keyword">while</span> curnodes:</span><br><span class="line">        nextnodes = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> curnodes:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    nextnodes.append(node.left)</span><br><span class="line">                    res.append(node.left.val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nextnodes.append(<span class="literal">None</span>)</span><br><span class="line">                    res.append(<span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    nextnodes.append(node.right)</span><br><span class="line">                    res.append(node.right.val)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nextnodes.append(<span class="literal">None</span>)</span><br><span class="line">                    res.append(<span class="literal">None</span>)</span><br><span class="line">        curnodes = nextnodes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> res[-<span class="number">1</span>] <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 最后空节点去掉</span></span><br><span class="line">        res.pop()</span><br><span class="line">    s = json.dumps(res)</span><br><span class="line">    s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_tree</span>(<span class="params">vals</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据层序遍历结果生成二叉树并且返回 root。</span></span><br><span class="line"><span class="string">    把题目中输入 null 换成 None</span></span><br><span class="line"><span class="string">    vals = [1,2,3,None,5]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vals:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    nodemap = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)):</span><br><span class="line">        <span class="keyword">if</span> vals[i]:</span><br><span class="line">            nodemap[i] = TreeNode(vals[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nodemap[i] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    root = nodemap[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)):</span><br><span class="line">        l = <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">        r = <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line">        cur = nodemap.get(i, <span class="literal">None</span>)</span><br><span class="line">        left = nodemap.get(l, <span class="literal">None</span>)</span><br><span class="line">        right = nodemap.get(r, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> cur:</span><br><span class="line">            cur.left = left</span><br><span class="line">            cur.right = right</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h1 id="python-交换列表元素的坑-交换副作用"><a href="#python-交换列表元素的坑-交换副作用" class="headerlink" title="python 交换列表元素的坑(交换副作用)"></a>python 交换列表元素的坑(交换副作用)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 41. 缺失的第一个正数 https://leetcode-cn.com/problems/first-missing-positive/</span><br><span class="line">class Solution(object):</span><br><span class="line">    def firstMissingPositive(self, nums):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        平常习惯了 python 里边交换元素 a,b=b,a 这里你可能这么写，那就中招了!</span><br><span class="line">        nums[i], nums[nums[i]-1] =  nums[nums[i]-1], nums[i] # 这么写死循环！</span><br><span class="line">        这个等价于</span><br><span class="line">        x, y = nums[nums[i]-1], nums[i]</span><br><span class="line">        nums[i] = x  # 这一步 nums[i] 已经修改了，下边一句赋值不是期望的 nums[i]了</span><br><span class="line">        nums[nums[i]-1] = y</span><br><span class="line"></span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        n = len(nums)</span><br><span class="line">        for i in range(n):</span><br><span class="line">            while 1 &lt;= nums[i] &lt;= n and nums[nums[i]-1] != nums[i]:</span><br><span class="line">                # NOTE: 注意这一句交换右边有副作用的，不能颠倒！！！</span><br><span class="line">                # nums[i], nums[nums[i]-1] =  nums[nums[i]-1], nums[i] # 这么写死循环！</span><br><span class="line">                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1] # 有副作用的放前边</span><br><span class="line">        for i in range(n):</span><br><span class="line">            if nums[i] != i+1:</span><br><span class="line">                return i+1</span><br><span class="line"></span><br><span class="line">        return n+1</span><br></pre></td></tr></table></figure><h1 id="兼容代码ACM-核心提交格式"><a href="#兼容代码ACM-核心提交格式" class="headerlink" title="兼容代码ACM&#x2F;核心提交格式"></a>兼容代码ACM&#x2F;核心提交格式</h1><p>注意牛客网有两种模式，一种是和 leetcode 一样的提交(无需处理输入)，只需要提交核心代码。<br>一种是 ACM 模式，还需要自己处理输入和输出。<br>建议使用这种兼容写法，同样的题目可以同时提交到 牛客、leetcode 和 acwing(python3)。<br>这道题目为例子 [679] 奖品分配 <a href="https://www.acwing.com/problem/content/681/">https://www.acwing.com/problem/content/681/</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这段代码可以直接以OJ输入模式提交，如果题目一样，直接复制 Solution 类就可以同时提交到leetcode</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self, scores</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        思路：记忆化搜索。时间O(N)</span></span><br><span class="line"><span class="string">        对于旁边都比自己大的点，它肯定是1</span></span><br><span class="line"><span class="string">        对于旁边有比自己小的点，先算出比自己小的点的值再+1就好了。</span></span><br><span class="line"><span class="string">        每个点如果计算过了就记忆化，下次再计算他的时候不用重复递归直接返回。</span></span><br><span class="line"><span class="string">        参考：https://www.acwing.com/solution/acwing/content/1520/</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line">        n = <span class="built_in">len</span>(scores)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @lru_cache(<span class="params">maxsize=<span class="literal">None</span></span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x</span>):</span><br><span class="line">            left = (x-<span class="number">1</span>+n) % n</span><br><span class="line">            right = (x+<span class="number">1</span>) % n</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> scores[x] &lt;= scores[left] <span class="keyword">and</span> scores[x] &lt;= scores[right]:  <span class="comment"># 注意是 &lt;= ，下边是 &lt;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> scores[left] &lt; scores[x]:</span><br><span class="line">                l = dfs(left)</span><br><span class="line">            <span class="keyword">if</span> scores[right] &lt; scores[x]:</span><br><span class="line">                r = dfs(right)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(l, r) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([dfs(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># python3 提交，python3 input 都当做 str 输入</span></span><br><span class="line">    so = Solution() <span class="comment"># 构造 Solution 实例后续调用</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        arrlen = <span class="built_in">input</span>()</span><br><span class="line">        arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="built_in">print</span>(so.solve(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-刷题常用内置算法和数据结构&quot;&gt;&lt;a href=&quot;#Python-刷题常用内置算法和数据结构&quot; class=&quot;headerlink&quot; title=&quot;Python 刷题常用内置算法和数据结构&quot;&gt;&lt;/a&gt;Python 刷题常用内置算法和数据结构&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="https://chaoleweisi.github.io/categories/python/"/>
    
    
    <category term="python内置库" scheme="https://chaoleweisi.github.io/tags/python%E5%86%85%E7%BD%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://chaoleweisi.github.io/2024/09/28/chapter_graph/index/"/>
    <id>https://chaoleweisi.github.io/2024/09/28/chapter_graph/index/</id>
    <published>2024-09-28T01:28:44.000Z</published>
    <updated>2024-09-28T01:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><img src="/2024/09/28/chapter_graph/index/assets/covers/chapter_graph.jpg" alt="图"></p><p>!!! abstract</p><pre><code>在生命旅途中，我们就像是一个个节点，被无数看不见的边相连。每一次的相识与相离，都在这张巨大的网络图中留下独特的印记。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/09/28/chapter_graph/index/assets/covers/chapter_graph.jpg&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
